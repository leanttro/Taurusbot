import os
import google.generativeai as genai
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from flask import Flask, jsonify, request, render_template
from flask_cors import CORS
from dotenv import load_dotenv
import traceback
from datetime import datetime # Importado para saber a data de hoje

# --- 1. CONFIGURA√á√ÉO INICIAL ---
print("‚ÑπÔ∏è  Iniciando o TAURUSbot...")
load_dotenv() # Carrega vari√°veis do .env

# Configura o Flask
app = Flask(__name__, template_folder='.', static_folder='.', static_url_path='')
CORS(app)

# --- 2. CARREGAMENTO DAS API KEYS ---
try:
    # Chave para IA (Gemini)
    GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
    if not GEMINI_API_KEY:
        print("‚ùå ERRO CR√çTICO: GEMINI_API_KEY n√£o encontrada no .env")
    genai.configure(api_key=GEMINI_API_KEY)
    
    # Chaves para Busca (Google Custom Search)
    CUSTOM_SEARCH_API_KEY = os.getenv('CUSTOM_SEARCH_API_KEY')
    CUSTOM_SEARCH_CX_ID = os.getenv('CUSTOM_SEARCH_CX_ID')
    if not CUSTOM_SEARCH_API_KEY or not CUSTOM_SEARCH_CX_ID:
        print("‚ùå ERRO CR√çTICO: CUSTOM_SEARCH_API_KEY ou CUSTOM_SEARCH_CX_ID n√£o encontrados no .env")
    
    print("‚úÖ  Chaves de API carregadas.")

except Exception as e:
    print(f"‚ùå Erro ao carregar chaves: {e}")

# --- 3. SYSTEM PROMPT (A PERSONALIDADE DO BOT) ---
# --- ALTERA√á√ÉO IN√çCIO: Adicionadas regras de Positividade (8, 9) e Cita√ß√£o de Fonte (7) ---
SYSTEM_PROMPT = """
Voc√™ √© o 'TAURUSbot', o assistente digital oficial e f√£ n√∫mero 1 da artista brasileira Duquesa (Jeysa Ribeiro).
Sua personalidade √© inspirada no signo de Touro: leal, criativo, forte, direto e um pouco ir√¥nico, mas sempre amig√°vel.
Seu objetivo √© ser o ponto central de informa√ß√µes para outros f√£s.

REGRAS PRINCIPAIS:
1.  **Tom de Voz:** Use uma linguagem jovem, com g√≠rias leves e emojis (üî•, ‚ôâ, üëë). Seja confiante.
2.  **Foco Total:** Fale APENAS sobre a Duquesa, sua m√∫sica, agenda, not√≠cias e o universo 'TAURUS'. Recuse educadamente qualquer outro assunto.
3.  **Use os DOIS Contextos:** Voc√™ receber√° um "CONTEXTO FIXO (Agenda Oficial)" e um "CONTEXTO DA WEB (Not√≠cias)".
4.  **Prioridade M√°xima:** Para perguntas sobre "agenda", "shows", "datas" ou "pr√≥ximo show", SEMPRE use o "CONTEXTO FIXO (Agenda Oficial)" como sua fonte da verdade. Ele √© mais confi√°vel que a busca na web.
5.  **Not√≠cias:** Para "not√≠cias", "lan√ßamentos" ou outros assuntos, use o "CONTEXTO DA WEB".
6.  **N√£o especule:** Se a informa√ß√£o n√£o estiver em NENHUM dos contextos, diga que n√£o achou nos "corres".
7.  **Citar Fontes (IMPORTANTE):** Ao usar uma informa√ß√£o do "CONTEXTO DA WEB", voc√™ DEVE citar a URL da fonte que est√° no contexto. (Ex: "Vi aqui no [T√≠tulo da Fonte] que... e o link √© esse: [URL]"). Se o contexto n√£o tiver a info, diga "N√£o achei nenhuma fonte sobre isso nos meus corres."
8.  **Positividade Absoluta:** Voc√™ NUNCA pode dizer nada negativo, depreciativo ou que possa ser interpretado como 'hate' sobre a Duquesa, sua m√∫sica, sua apar√™ncia ou sua carreira. Filtre o "CONTEXTO DA WEB" para extrair apenas fatos e not√≠cias positivas ou neutras.
9.  **Bloqueio de Hate (IMPORTANTE):** Se um usu√°rio fizer uma pergunta negativa, com 'hate', ou que seja uma cr√≠tica √† Duquesa, voc√™ DEVE recusar educadamente. Responda algo como: 'Opa, aqui no TAURUSbot a gente s√≥ foca na energia boa e no talento da rainha üëë. N√£o vou com essa vibe. Manda outra pergunta a√≠!'
"""
# --- ALTERA√á√ÉO FIM ---

# --- NOVA SE√á√ÉO: CONTEXTO FIXO (RAG LOCAL) ---
# Copiado diretamente da agenda do index.html (Data de hoje: 30/10/2025)
# Esta √© a "mem√≥ria" do bot sobre a agenda do site.
LOCAL_AGENDA_CONTEXT = """
- 18 OUT 2025: RAP IN CENA, PORTO ALEGRE, RS (Evento Passado)
- 19 OUT 2025: SANGUE NOVO, SALVADOR, BA (Evento Passado)
- 31 OUT 2025: SESC BELENZINHO, S√ÉO PAULO, SP (Esgotado)
- 01 NOV 2025: SESC BELENZINHO, S√ÉO PAULO, SP (Esgotado)
- 15 NOV 2025: BATEKOO, S√ÉO PAULO, SP (Esgotado)
- 20 NOV 2025: CONSCIENCIA NEGRA, ITATIBA, SP (Link em breve)
- 21 NOV 2025: CIRCO VOADOR, RIO DE JANEIRO, RJ (Indispon√≠vel)
- 22 NOV 2025: CIRCO VOADOR, RIO DE JANEIRO, RJ (Comprar Ingresso)
- 23 NOV 2025: EM BREVE, Aguardando... (Aguarde)
- 29 NOV 2025: AWE FESTIVAL, S√ÉO JOS√â DO RIO PRETO, SP (Comprar Ingresso)
- 06 DEZ 2025: COQUETEL MOLOTOV, RECIFE, PE (Comprar Ingresso)
- 20 DEZ 2025: ESPA√áO LIV, S√ÉO CAETANO DO SUL, SP (Comprar Ingresso)
"""

# --- 4. FUN√á√ÉO DE BUSCA (O "R" DO RAG) ---
# --- ALTERA√á√ÉO IN√çCIO: Modificada para retornar T√≠tulo, URL e Snippet ---
def google_search(query_str, api_key, cx_id, num_results=3):
    """
    Realiza uma busca na Google Custom Search API e retorna snippets formatados
    contendo o T√≠tulo, a URL e o Snippet.
    """
    print(f"‚ÑπÔ∏è  [RAG] Realizando busca por: '{query_str}'")
    try:
        service = build("customsearch", "v1", developerKey=api_key)
        
        res = service.cse().list(
            q=query_str,
            cx=cx_id,
            num=num_results,
        ).execute()

        items = res.get('items', [])
        if not items:
            print("‚ö†Ô∏è  [RAG] Nenhum resultado encontrado na busca.")
            return "Nenhuma informa√ß√£o recente encontrada na web."

        snippets = []
        for i, item in enumerate(items):
            snippet_text = item.get('snippet', 'Sem descri√ß√£o.').replace('\n', ' ').strip()
            item_title = item.get('title', 'Fonte Desconhecida')
            item_url = item.get('link', 'URL N√£o encontrada') # Pega o link (URL)
            
            # Novo formato do contexto, incluindo a URL
            snippets.append(f"Fonte {i+1} (T√≠tulo: {item_title}, URL: {item_url}): \"{snippet_text}\"")
        
        context_str = " | ".join(snippets)
        print(f"‚úÖ  [RAG] Contexto encontrado: {context_str[:100]}...")
        return context_str

    except HttpError as e:
        print(f"‚ùå ERRO [RAG] HTTP: {e}")
        return f"Erro ao buscar na web: {e}"
    except Exception as e:
        print(f"‚ùå ERRO [RAG] Inesperado: {e}")
        traceback.print_exc()
        return "Erro inesperado ao processar a busca."
# --- ALTERA√á√ÉO FIM ---

# --- 5. INICIALIZA√á√ÉO DO GEMINI ---
model = None
chat_session = None
try:
    if GEMINI_API_KEY:
        model = genai.GenerativeModel('gemini-flash-latest')
        chat_session = model.start_chat(
            history=[
                {"role": "user", "parts": [SYSTEM_PROMPT]},
                {"role": "model", "parts": ["Entendido. Sou o TAURUSbot ‚ôâüî•. Minha mem√≥ria t√° atualizada com a agenda oficial do site e eu tamb√©m dou um corre na web pra saber das √∫ltimas. Manda a braba."]}
            ]
        )
        print("‚úÖ  Modelo Gemini ('gemini-flash-latest') inicializado com a persona TAURUSbot.")
    else:
        print("‚ö†Ô∏è  AVISO: API Key do Gemini n√£o carregada. O chatbot n√£o funcionar√°.")

except Exception as e:
    print(f"‚ùå ERRO CR√çTICO ao inicializar o GenerativeModel: {e}")
    traceback.print_exc()

# --- 6. ROTAS DA APLICA√á√ÉO ---

@app.route('/')
def index_page(): # Renomeado de 'index' para evitar conflito de nome
    """Serve a p√°gina principal (index.html)."""
    return render_template('index.html')

@app.route('/api/chat', methods=['POST'])
def handle_chat():
    """Recebe a mensagem do usu√°rio, executa o RAG e retorna a resposta do Gemini."""
    if not model or not chat_session or not CUSTOM_SEARCH_API_KEY or not CUSTOM_SEARCH_CX_ID:
        print("‚ùå Erro na Rota /api/chat: Servi√ßos de IA ou Busca n√£o inicializados.")
        return jsonify({'error': 'Servi√ßo indispon√≠vel no momento. Verifique as chaves de API.'}), 503

    try:
        data = request.json
        user_message = data.get('message')
        if not user_message:
            return jsonify({'error': 'Mensagem n√£o pode ser vazia.'}), 400
        print(f"üí¨ Mensagem do Usu√°rio: {user_message}")

        # --- FLUXO RAG (Executado a cada mensagem) ---
        # 1. Busca no Google para obter contexto em tempo real
        search_context = google_search(
            query_str=f"Duquesa {user_message}",
            api_key=CUSTOM_SEARCH_API_KEY,
            cx_id=CUSTOM_SEARCH_CX_ID
        )

        # 2. Pega a data atual para o bot saber o que √© "pr√≥ximo"
        today_str = datetime.now().strftime('%d %b %Y')

        # 3. Monta o prompt final para o Gemini (MODIFICADO)
        final_prompt = f"""
        INFORMA√á√ïES IMPORTANTES:
        - A data de hoje √©: {today_str}
        
        CONTEXTO FIXO (Agenda Oficial do Site - Fonte Principal para shows):
        ---
        {LOCAL_AGENDA_CONTEXT}
        ---

        CONTEXTO DA WEB (Not√≠cias Recentes - Fonte para not√≠cias e lan√ßamentos):
        ---
        {search_context}
        ---

        PERGUNTA DO USU√ÅRIO:
        "{user_message}"
        
        INSTRU√á√ÉO: Responda o usu√°rio. 
        - Se a pergunta for sobre "pr√≥ximo show", "agenda" ou "datas", olhe o "CONTEXTO FIXO" e a data de hoje. 
        - Para not√≠cias ou outros assuntos, use o "CONTEXTO DA WEB" e **lembre-se da REGRA 7 (Citar Fonte) e REGRA 8 (Positividade)**.
        - Se o usu√°rio for negativo, lembre-se da **REGRA 9 (Bloqueio de Hate)**.
        """

        # 4. Envia para o Gemini
        response = chat_session.send_message(
            final_prompt,
            generation_config=genai.types.GenerationConfig(temperature=0.7),
            safety_settings={'HATE': 'BLOCK_NONE', 'HARASSMENT': 'BLOCK_NONE',
                             'SEXUAL' : 'BLOCK_NONE', 'DANGEROUS' : 'BLOCK_NONE'}
        )

        print(f"ü§ñ Resposta do Bot: {response.text[:100]}...")
        return jsonify({'reply': response.text})

    except genai.types.generation_types.StopCandidateException as stop_ex:
        print(f"‚ö†Ô∏è  API BLOQUEOU a resposta por seguran√ßa: {stop_ex}")
        return jsonify({'reply': "Opa, n√£o posso gerar uma resposta pra isso, f√£. Tenta perguntar de outro jeito, focado na Duquesa, beleza?"})
    except Exception as e:
        print(f"‚ùå Erro ao chamar a API do Gemini: {e}")
        traceback.print_exc()
        return jsonify({'error': 'Ocorreu um erro ao processar sua mensagem com a IA.'}), 503

# --- 7. Execu√ß√£o do App ---
if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=False, use_reloader=False)
